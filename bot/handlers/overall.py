# bot/handlers/overall.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.markdown import hcode

from ..gas_client import load_all
from ..utils.periods import period_bounds

router = Router(name="overall")

async def _send_overall_for_period(target: CallbackQuery | Message, period_key: str):
    try:
        dt_from, dt_to = period_bounds(period_key)
        # —Å–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–¥—É–º–∞—é‚Ä¶¬ª
        if isinstance(target, CallbackQuery):
            msg = await target.message.reply("‚è≥ –°—á–∏—Ç–∞—é –æ–±—â—É—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å‚Ä¶")
        else:
            msg = await target.reply("‚è≥ –°—á–∏—Ç–∞—é –æ–±—â—É—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å‚Ä¶")

        data = await load_all(**{"from": dt_from, "to": dt_to})
        if not data.get("ok"):
            raise RuntimeError(data.get("error") or "unknown error")

        chunks = data.get("chunks") or []
        text = f"üìä –ü–µ—Ä–∏–æ–¥: {dt_from} ‚Äî {dt_to}\n\n" + "\n\n".join(chunks) if chunks else f"–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ {dt_from} ‚Äî {dt_to}."
        await msg.edit_text(text[:4096])
    except Exception as e:
        err = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–±—â–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏:\n{hcode(str(e))}"
        if isinstance(target, CallbackQuery):
            await target.message.answer(err)
        else:
            await target.answer(err)

# 1) –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–≤–æ–µ–π —Å—Ç–∞—Ä–æ–π –∫–Ω–æ–ø–∫–∏ —Å callback_data="all_load"
@router.callback_query(F.data == "all_load")
async def on_all_load_legacy(cb: CallbackQuery):
    # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª
    await cb.answer()
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –¢–ï–ö–£–©–ò–ô –ú–ï–°–Ø–¶
    await _send_overall_for_period(cb, "month")

# 2) –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: overall:month / overall:quarter / overall:year / overall:custom:YYYY-MM-DD:YYYY-MM-DD
@router.callback_query(F.data.startswith("overall:"))
async def on_overall(cb: CallbackQuery):
    await cb.answer()
    try:
        # overall:month
        # overall:quarter
        # overall:year
        # overall:custom:2025-01-01:2025-03-31
        parts = (cb.data or "overall:month").split(":")
        # parts[0] == "overall"
        kind = parts[1] if len(parts) >= 2 else "month"
        period_key = kind
        if kind == "custom" and len(parts) >= 4:
            period_key = f"{kind}:{parts[2]}:{parts[3]}"
        await _send_overall_for_period(cb, period_key)
    except Exception as e:
        await cb.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–∞:\n{hcode(str(e))}")
