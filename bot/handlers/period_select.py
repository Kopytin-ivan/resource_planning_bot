# bot/handlers/period_select.py
from __future__ import annotations

from datetime import date
from aiogram import Router
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hbold, hcode

from ..keyboards.periods import PeriodCB, periods_kb
from ..utils.date_ranges import period_to_range  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –¥–ª—è load_all / load_unit
from ..utils.tg_utils import split_text
from ..gas_client import (
    load_all as gas_load_all,
    load_unit as gas_load_unit,
    list_endings_in_month,
    list_endings_within_months,
)

router = Router(name="period_select")


@router.callback_query(PeriodCB.filter())
async def on_period_selected(cb: CallbackQuery, callback_data: PeriodCB):
    try:
        # 0) –†–∞—Å–ø–∞–∫–æ–≤–∫–∞
        scope = (callback_data.scope or "").replace("__", ":")
        token = callback_data.period or "quarter"

        # 1) –û–±—â–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –∂–º—ë—à—å –∏–∑ –º–µ–Ω—é ¬´–û–±—â–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å¬ª)
        if scope == "load_all":
            try:
                await cb.answer("–ì–æ—Ç–æ–≤–ª—é –æ—Ç—á—ë—Ç‚Ä¶", show_alert=False)
            except Exception:
                pass

            rng = period_to_range(token) or {}
            resp = await gas_load_all(**rng)
            chunks = resp.get("chunks") or []
            title = hbold("–û–±—â–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å")

            if not chunks:
                await cb.message.answer(f"{title}\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
            else:
                for chunk in chunks:
                    text = f"{title}\n\n{chunk}".strip()
                    for part in split_text(text, limit=3900):
                        await cb.message.answer(part)
            return

        # 2) –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–Ω–∏—Ç–∞ (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å –ø–µ—Ä–∏–æ–¥–æ–º)
        if scope.startswith("load_unit:"):
            unit = scope.split(":", 1)[1]
            try:
                await cb.answer()
            except Exception:
                pass

            rng = period_to_range(token) or {}
            args = {"unit": unit, **rng}
            resp = await gas_load_unit(**args)
            text = resp.get("text") or "–ü—É—Å—Ç–æ"
            await cb.message.answer(text[:4096])
            return

        # 3) –ù–û–í–û–ï: –ó–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —é–Ω–∏—Ç–∞
        if scope.startswith("endings:"):
            unit = scope.split(":", 1)[1]
            try:
                await cb.answer()
            except Exception:
                pass

            today = date.today()
            m, y = today.month, today.year

            if token == "this_month":
                resp = await list_endings_in_month(unit, month=m, year=y)
            elif token == "next_month":
                m2, y2 = (1, y + 1) if m == 12 else (m + 1, y)
                resp = await list_endings_in_month(unit, month=m2, year=y2)
            elif token == "quarter":
                resp = await list_endings_within_months(unit, n=3)
            elif token == "half_year":
                resp = await list_endings_within_months(unit, n=6)
            elif token == "year":
                resp = await list_endings_within_months(unit, n=12)
            else:
                resp = {"ok": False, "error": f"Unknown period token: {token}"}

            if not resp or not resp.get("ok"):
                err = (resp or {}).get("error") or "–æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ GAS"
                await cb.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π: {hcode(err)}")
                return

            chunks = resp.get("chunks") or []
            if not chunks:
                await cb.message.answer("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            else:
                for ch in chunks:
                    for part in split_text(ch, limit=3900):
                        await cb.message.answer(part)
            return

        # 4) –§–æ–ª–±—ç–∫: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π scope
        await cb.message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π scope: {hcode(scope)}")

    except Exception as e:
        await cb.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–∏–æ–¥–∞:\n{hcode(str(e))}")
