# bot/handlers/load_unit.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hcode

from ..gas_client import load_unit
from ..utils.periods import period_bounds
from ..keyboards.units import units_keyboard  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —é–Ω–∏—Ç–∞

router = Router(name="unit_load")

async def _send_unit_load(cb: CallbackQuery, unit: str, period_key: str):
    try:
        dt_from, dt_to = period_bounds(period_key)
        msg = await cb.message.reply(f"‚è≥ –°—á–∏—Ç–∞—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è UNIT {unit}‚Ä¶")
        data = await load_unit(**{"unit": unit, "from": dt_from, "to": dt_to})
        if not data.get("ok"):
            raise RuntimeError(data.get("error") or "unknown error")

        text = data.get("text") or "–ü—É—Å—Ç–æ."
        head = f"üì¶ UNIT {unit}\n–ü–µ—Ä–∏–æ–¥: {dt_from} ‚Äî {dt_to}\n\n"
        await msg.edit_text((head + text)[:4096])
    except Exception as e:
        await cb.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —é–Ω–∏—Ç–∞:\n{hcode(str(e))}")

# 1) –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–≤–æ–µ–π —Å—Ç–∞—Ä–æ–π –∫–Ω–æ–ø–∫–∏ —Å callback_data="unit_load" ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —é–Ω–∏—Ç
@router.callback_query(F.data == "unit_load")
async def on_unit_load_legacy(cb: CallbackQuery):
    await cb.answer()
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —é–Ω–∏—Ç–∞; –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–∞–ª–µ–µ —Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    await cb.message.answer("–í—ã–±–µ—Ä–∏ UNIT:", reply_markup=units_keyboard(prefix="unitload", period="month"))

# 2) –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç:
# "unitload:<unit>:month"
# "unitload:<unit>:quarter"
# "unitload:<unit>:year"
# "unitload:<unit>:custom:YYYY-MM-DD:YYYY-MM-DD"
@router.callback_query(F.data.startswith("unitload:"))
async def on_unit_load(cb: CallbackQuery):
    await cb.answer()
    parts = (cb.data or "").split(":")
    if len(parts) < 3:
        await cb.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —é–Ω–∏—Ç–∞.")
        return

    unit = parts[1]
    kind = parts[2]
    period_key = kind
    if kind == "custom" and len(parts) >= 5:
        period_key = f"{kind}:{parts[3]}:{parts[4]}"

    await _send_unit_load(cb, unit, period_key)
