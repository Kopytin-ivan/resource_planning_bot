# bot/handlers/load_unit.py
from __future__ import annotations

import os, json, tempfile, time
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.markdown import hbold

from ..gas_client import list_units_min, list_active_projects
from ..keyboards.units import units_keyboard
from ..keyboards.periods import periods_kb
from ..utils.tg_utils import (
    split_text,
    strip_codes_in_text,
    loading_message,
    pn,
    answer_html,
    edit_html,
    gas_guard,
)

router = Router(name="unit_load")

# ---- –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –∫—ç—à –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞ ----
_UNITS_CACHE: list[dict] | None = None
_UNITS_TS: float = 0.0
_UNITS_TTL = 300  # 5 –º–∏–Ω—É—Ç

# –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –∫—ç—à –Ω–∞ –¥–∏—Å–∫ ‚Äî —á—Ç–æ–±—ã –¥–∞–∂–µ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –Ω–µ –¥–µ—Ä–≥–∞—Ç—å GAS
_CACHE_FILE = os.path.join(tempfile.gettempdir(), "bot_units_cache_v2.json")
_PERSIST_TTL = 3600  # 1 —á–∞—Å


async def _get_all_units(force_refresh: bool = False) -> list[dict]:
    """
    –í–ù–ò–ú–ê–ù–ò–ï: —ç—Ç–æ –ø–æ–º–æ—â–Ω–∏–∫, –ù–ï —Ö—ç–Ω–¥–ª–µ—Ä. –ù–µ –≤–µ—à–∞–µ–º @gas_guard –∑–¥–µ—Å—å.
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –∏ ¬´–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶¬ª —Å—Ç–∞–≤–∏–º –≤ –≤—ã–∑—ã–≤–∞—é—â–∏—Ö –º–µ—Å—Ç–∞—Ö.
    """
    global _UNITS_CACHE, _UNITS_TS
    now = time.time()

    # 1) –∫—ç—à –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    if not force_refresh and _UNITS_CACHE and (now - _UNITS_TS) < _UNITS_TTL:
        return _UNITS_CACHE

    # 2) –∫—ç—à –Ω–∞ –¥–∏—Å–∫–µ
    if not force_refresh and os.path.exists(_CACHE_FILE):
        try:
            with open(_CACHE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            if (now - float(data.get("ts", 0))) < _PERSIST_TTL and isinstance(data.get("units"), list):
                _UNITS_CACHE = data["units"]
                _UNITS_TS = now
                return _UNITS_CACHE
        except Exception:
            pass  # –∏–≥–Ω–æ—Ä–∏–º –±–∏—Ç—ã–π —Ñ–∞–π–ª

    # 3) –∑–∞–ø—Ä–æ—Å –∫ GAS
    resp = await list_units_min()
    if not (resp and resp.get("ok")):
        raise RuntimeError((resp or {}).get("error") or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —é–Ω–∏—Ç–æ–≤")

    units = resp.get("units") or []
    for u in units:
        if not u.get("label"):
            u["label"] = f"(UNIT {u.get('code')})"

    _UNITS_CACHE = units
    _UNITS_TS = now

    # 4) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
    try:
        with open(_CACHE_FILE, "w", encoding="utf-8") as f:
            json.dump({"ts": now, "units": units}, f, ensure_ascii=False)
    except Exception:
        pass

    return units


def _top_units(units: list[dict]) -> list[dict]:
    return [u for u in units if "." not in str(u.get("code", ""))]


def _sub_units(units: list[dict], top_code: str) -> list[dict]:
    pref = f"{top_code}."
    return [u for u in units if str(u.get("code", "")).startswith(pref)]


async def _show_sub_units(cb: CallbackQuery, top_code: str, page: int = 1):
    async with loading_message(cb, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–¥-—é–Ω–∏—Ç—ã‚Ä¶"):
        units = await _get_all_units()
        subs = _sub_units(units, top_code)
        dept_label = next((u.get("label") for u in units if str(u.get("code")) == str(top_code)), f"(UNIT {top_code})")

        extra = [
            [InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–¥–µ–ª —Ü–µ–ª–∏–∫–æ–º", callback_data=f"unitload_show:{top_code}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –æ—Ç–¥–µ–ª–∞–º", callback_data="unitload_top")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="unitload_refresh")],
        ]
        kb = units_keyboard(subs, page=page, action_prefix=f"unitload_sub:{top_code}", extra_rows=extra)
        await cb.message.edit_text(f"{hbold(dept_label)}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥-—é–Ω–∏—Ç:", reply_markup=kb)


async def _send_active_preview(cb: CallbackQuery, code: str):
    """
    –®–ª—ë—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö (–Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö) –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —é–Ω–∏—Ç–∞.
    –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä, —Ç.–∫. —ç—Ç–æ –≤—ã–∑–æ–≤ –∫ GAS.
    """
    try:
        async with loading_message(cb, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã‚Ä¶"):
            resp = await list_active_projects(code)

        if not resp or not resp.get("ok"):
            err = (resp or {}).get("error") or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            await cb.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è UNIT {code}: {err}")
            return

        chunks = resp.get("chunks") or []
        if not chunks:
            await cb.message.answer(f"üß© (UNIT {code})\n–ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ—Ç.")
            return

        for ch in chunks:
            cleaned = strip_codes_in_text(ch)
            for part in split_text(cleaned, limit=3900):
                await answer_html(cb, part)  # HTML, —á—Ç–æ–±—ã <b> —Ä–∞–±–æ—Ç–∞–ª
    except Exception as e:
        await cb.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ UNIT {code}: {e!s}")


async def _ask_endings_period(cb: CallbackQuery, code: str, label: str | None = None):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏–º–µ–Ω–Ω–æ –¥–ª—è '–∑–∞–≤–µ—Ä—à–µ–Ω–∏–π' –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —é–Ω–∏—Ç–∞.
    scope –∏—Å–ø–æ–ª—å–∑—É–µ–º endings__<–∫–æ–¥>, —á—Ç–æ–±—ã period_select –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π, –∞ –Ω–µ load_all.
    """
    await cb.message.answer(
        f"{label or f'(UNIT {code})'}\n–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è‚Ä¶",
        reply_markup=periods_kb(scope=f"endings__{code}")
    )


async def _show_top_units(msg_or_cb: Message | CallbackQuery, page: int = 1):
    loading_txt = "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –æ—Ç–¥–µ–ª—ã‚Ä¶"
    try:
        if isinstance(msg_or_cb, CallbackQuery):
            # –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–µ–π—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –ø–æ–∫–∞–∂–µ–º –ª–æ–∞–¥–µ—Ä
            await msg_or_cb.answer()
            await msg_or_cb.message.edit_text(loading_txt)
            units = await _get_all_units()
            tops = _top_units(units)
            kb = units_keyboard(
                tops,
                page=page,
                action_prefix="unitload_top",
                extra_rows=[[InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="unitload_refresh")]],
            )
            await msg_or_cb.message.edit_text(hbold("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª:"), reply_markup=kb)
        else:
            # –¥–ª—è message —Å–Ω–∞—á–∞–ª–∞ —à–ª—ë–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä ¬´‚è≥¬ª, –ø–æ—Ç–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ –∂–µ
            holder = await msg_or_cb.answer(loading_txt)
            units = await _get_all_units()
            tops = _top_units(units)
            kb = units_keyboard(
                tops,
                page=page,
                action_prefix="unitload_top",
                extra_rows=[[InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="unitload_refresh")]],
            )
            await holder.edit_text(hbold("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª:"), reply_markup=kb)
    except Exception as e:
        text_err = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–¥–µ–ª–æ–≤: {e!s}"
        if isinstance(msg_or_cb, CallbackQuery):
            try:
                await msg_or_cb.message.edit_text(text_err)
            except Exception:
                await msg_or_cb.message.answer(text_err)
        else:
            try:
                await holder.edit_text(text_err)
            except Exception:
                await msg_or_cb.answer(text_err)

# --- callbacks -------------------------------------------------------

@router.message(F.text == "üß© –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —é–Ω–∏—Ç–∞")
@gas_guard()   
async def on_unit_load_entry(msg: Message):
    await _show_top_units(msg, page=1)


@router.callback_query(F.data == "unitload_refresh")
@gas_guard()
async def on_unitload_refresh(cb: CallbackQuery):
    await cb.answer("–û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫‚Ä¶")
    global _UNITS_CACHE, _UNITS_TS
    _UNITS_CACHE, _UNITS_TS = None, 0.0
    try:
        os.remove(_CACHE_FILE)
    except OSError:
        pass
    await _show_top_units(cb, page=1)


@router.callback_query(F.data == "unitload_top")
@gas_guard()
async def on_unitload_top(cb: CallbackQuery):
    await cb.answer()
    await _show_top_units(cb, page=1)


@router.callback_query(F.data.startswith("unitload_top:page:"))
@gas_guard()
async def on_unitload_top_page(cb: CallbackQuery):
    await cb.answer()
    try:
        page = int((cb.data or "").split(":")[-1])
    except Exception:
        page = 1
    await _show_top_units(cb, page=page)


@router.callback_query(F.data.startswith("unitload_top:pick:"))
@gas_guard()
async def on_unitload_top_pick(cb: CallbackQuery):
    await cb.answer()
    # ‚è≥ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –º–æ–∂–µ—Ç –¥–µ—Ä–Ω—É—Ç—å GAS (–µ—Å–ª–∏ –∫—ç—à —Ö–æ–ª–æ–¥–Ω—ã–π) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
    async with loading_message(cb, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –æ—Ç–¥–µ–ª‚Ä¶"):
        units = await _get_all_units()
    code = (cb.data or "").split(":")[-1]
    subs = _sub_units(units, code)
    if subs:
        await _show_sub_units(cb, top_code=code, page=1)
        return
    # –æ—Ç–¥–µ–ª –±–µ–∑ –ø–æ–¥-—é–Ω–∏—Ç–æ–≤ ‚Üí —Å—Ä–∞–∑—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
    await _send_active_preview(cb, code)
    label = next((u.get("label") for u in units if str(u.get("code")) == str(code)), None)
    await _ask_endings_period(cb, code=code, label=label)


@router.callback_query(F.data.startswith("unitload_sub:"))
@gas_guard()
async def on_unitload_sub(cb: CallbackQuery):
    await cb.answer()
    parts = (cb.data or "").split(":")
    if len(parts) < 3:
        return
    top_code = parts[1]
    action = parts[2]
    if action == "page":
        try:
            page = int(parts[3])
        except Exception:
            page = 1
        await _show_sub_units(cb, top_code=top_code, page=page)
        return
    if action == "pick":
        code = parts[3]
        await _send_active_preview(cb, code)  # ‚Üê —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö
        # –∑–∞—Ç–µ–º ‚Äî –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–¥-—é–Ω–∏—Ç–∞
        # –ù–ï –¥–µ—Ä–≥–∞–µ–º GAS —Ä–∞–¥–∏ –ª–µ–π–±–ª–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç.
        label = next(
            (u.get("label") for u in (_UNITS_CACHE or []) if str(u.get("code")) == str(code)),
            f"(UNIT {code})"
        )
        await _ask_endings_period(cb, code=code, label=label)
        return


@router.callback_query(F.data.startswith("unitload_show:"))
@gas_guard()
async def on_unitload_show_dept(cb: CallbackQuery):
    await cb.answer()
    code = (cb.data or "").split(":")[-1]
    await _send_active_preview(cb, code)
    # –î–ª—è –ø–æ–¥–ø–∏—Å–∏ —Å–Ω–æ–≤–∞ –ù–ï —Ö–æ–¥–∏–º –≤ GAS ‚Äî –±–µ—Ä—ë–º –ª–µ–π–±–ª –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç
    label = next(
        (u.get("label") for u in (_UNITS_CACHE or []) if str(u.get("code")) == str(code)),
        f"(UNIT {code})"
    )
    await _ask_endings_period(cb, code=code, label=label)
