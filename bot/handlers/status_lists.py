# bot/handlers/status_lists.py
from __future__ import annotations

import re
from aiogram import Router, F
from aiogram.types import Message
from aiogram.utils.markdown import hbold

from ..gas_client import list_projects_by_status
from bot.utils.tg_utils import pretty_name, esc, loading_message, answer_html, edit_html, split_text


router = Router(name="status_lists")

_MAX = 3900

def _split_long(text: str) -> list[str]:
    # –º–æ–∂–Ω–æ –∏ –∏–º–ø–æ—Ä—Ç–Ω—ã–π split_text –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—é –ª–æ–∫–∞–ª—å–Ω–æ —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –ª–æ–≥–∏–∫—É
    parts, buf, ln = [], [], 0
    for line in text.splitlines():
        add = len(line) + 1
        if ln + add > _MAX:
            parts.append("\n".join(buf))
            buf, ln = [line], add
        else:
            buf.append(line); ln += add
    if buf:
        parts.append("\n".join(buf))
    return parts

def _format_block(title: str, items: list[dict]) -> str:
    if not items:
        return f"{title}\n‚Äî –Ω–µ—Ç ‚Äî"

    lines = [title]
    for it in items:
        unit = esc(it.get("unit") or "UNIT ?")
        sub  = esc(it.get("sub") or "")
        unit_show = f"{unit} / {sub}" if sub else unit

        name   = esc(pretty_name(it.get("name") or "‚Äî"))
        mgr    = esc(it.get("mgr") or "‚Äî")
        period = esc(it.get("period") or "‚Äî")
        end    = it.get("end")
        hasD   = bool(it.get("hasEndDate"))
        addEnd = (not hasD and end) and f" ‚Äî –¥–æ {esc(end)}" or ""

        lines.append(f"‚Ä¢ {unit_show} ‚Äî {name} ‚Äî {mgr} ‚Äî {period}{addEnd}")
    return "\n".join(lines)

@router.message(F.text.in_({"üü° –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–µ", "‚è∏ –ù–∞ –ø–∞—É–∑–µ/–Ω–µ –Ω–∞—á–∞—Ç", "üìã –°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤"}))
async def show_status_lists(msg: Message):
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –≤ HTML
    async with loading_message(msg):
        resp = await list_projects_by_status()
    if not resp or not resp.get("ok"):
        await answer_html(msg, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤.")
        return

    pending = resp.get("pending") or []
    paused  = resp.get("paused")  or []

    want = msg.text or ""
    if "üìã" in want:
        head = hbold("–°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –≤—Å–µ–º —é–Ω–∏—Ç–∞–º")
        block = "\n\n".join([
            _format_block("üü° –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ / –∑–∞–∫—Ä—ã—Ç–∏–µ:", pending),
            _format_block("‚è∏ –ù–∞ –ø–∞—É–∑–µ / –Ω–µ –Ω–∞—á–∞—Ç:",        paused),
        ])
        text = f"{head}\n\n{block}"
        for part in _split_long(text):
            await answer_html(msg, part)
        return

    if "üü°" in want:
        text = _format_block(hbold("üü° –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ / –∑–∞–∫—Ä—ã—Ç–∏–µ:"), pending)
        for part in _split_long(text):
            await answer_html(msg, part)
        return

    if "‚è∏" in want:
        text = _format_block(hbold("‚è∏ –ù–∞ –ø–∞—É–∑–µ / –Ω–µ –Ω–∞—á–∞—Ç:"), paused)
        for part in _split_long(text):
            await answer_html(msg, part)
        return

# ====== –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å –ø–æ–¥—é–Ω–∏—Ç–∞–º–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –≤—Ç–æ—Ä—É—é –≤–µ—Ä—Å–∏—é) ======

_RX_SUB_CODE = re.compile(r"^\(\s*UNIT\s*([0-9]+(?:\.[0-9]+)?)\s*\)", re.I)

def _short_sub(label: str | None) -> str:
    if not label:
        return ""
    m = _RX_SUB_CODE.match(str(label))
    return m.group(1) if m else str(label)

def _format_grouped_by_unit(title: str, items: list[dict]) -> str:
    if not items:
        return f"{title}\n‚Äî –Ω–µ—Ç ‚Äî"
    by_unit: dict[str, list[dict]] = {}
    for it in items:
        by_unit.setdefault(it.get("unit") or "UNIT ?", []).append(it)

    lines = [title]
    for unit in sorted(by_unit.keys()):
        lines.append(hbold(esc(unit)))
        for it in by_unit[unit]:
            name   = esc(pretty_name(it.get("name") or "‚Äî"))
            mgr    = esc(it.get("mgr") or "‚Äî")
            period = esc(it.get("period") or "‚Äî")
            end    = it.get("end")
            hasD   = bool(it.get("hasEndDate"))
            addEnd = (not hasD and end) and f" ‚Äî –¥–æ {esc(end)}" or ""

            sub_label = it.get("sub") or ""
            sub = esc(_short_sub(sub_label))
            prefix = f"{sub} ¬∑ " if sub else ""

            lines.append(f"‚Ä¢ {prefix}{name} ‚Äî {mgr} ‚Äî {period}{addEnd}")
        lines.append("")
    return "\n".join(lines).rstrip()

async def _send_statuses(msg: Message, show: str):
    wait = await answer_html(msg, "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶")
    try:
        resp = await list_projects_by_status()
    except Exception as e:
        await edit_html(wait, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤.\n<code>{esc(str(e))}</code>")
        return

    if not resp or not resp.get("ok"):
        err = (resp or {}).get("error") or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        await edit_html(wait, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤.\n<code>{esc(str(err))}</code>")
        return

    pending = resp.get("pending") or []
    paused  = resp.get("paused")  or []

    if show == "all":
        head = hbold("–°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –≤—Å–µ–º —é–Ω–∏—Ç–∞–º")
        block = "\n\n".join([
            _format_grouped_by_unit("üü° –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ / –∑–∞–∫—Ä—ã—Ç–∏–µ:", pending),
            _format_grouped_by_unit("‚è∏ –ù–∞ –ø–∞—É–∑–µ / –Ω–µ –Ω–∞—á–∞—Ç:",        paused),
        ])
        text = f"{head}\n\n{block}"
        parts = _split_long(text)
        await edit_html(wait, parts[0])
        for p in parts[1:]:
            await answer_html(msg, p)
        return

    if show == "pending":
        text = _format_grouped_by_unit(hbold("üü° –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ / –∑–∞–∫—Ä—ã—Ç–∏–µ:"), pending)
        parts = _split_long(text)
        await edit_html(wait, parts[0])
        for p in parts[1:]:
            await answer_html(msg, p)
        return

    if show == "paused":
        text = _format_grouped_by_unit(hbold("‚è∏ –ù–∞ –ø–∞—É–∑–µ / –Ω–µ –Ω–∞—á–∞—Ç:"), paused)
        parts = _split_long(text)
        await edit_html(wait, parts[0])
        for p in parts[1:]:
            await answer_html(msg, p)
        return

@router.message(F.text == "üü° –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–µ")
async def show_pending(msg: Message):
    await _send_statuses(msg, "pending")

@router.message(F.text == "‚è∏ –ù–∞ –ø–∞—É–∑–µ/–Ω–µ –Ω–∞—á–∞—Ç")
async def show_paused(msg: Message):
    await _send_statuses(msg, "paused")

@router.message(F.text == "üìã –°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤")
async def show_all_statuses(msg: Message):
    await _send_statuses(msg, "all")
