# bot/handlers/status_lists.py
from __future__ import annotations

import re
from aiogram import Router, F
from aiogram.types import Message
from aiogram.utils.markdown import hbold

from ..gas_client import list_projects_by_status

router = Router(name="status_lists")

_MAX = 3900  # –∑–∞–ø–∞—Å –¥–æ –ª–∏–º–∏—Ç–∞ 4096

def _split_long(text: str) -> list[str]:
    parts, buf, ln = [], [], 0
    for line in text.splitlines():
        add = len(line) + 1
        if ln + add > _MAX:
            parts.append("\n".join(buf))
            buf, ln = [line], add
        else:
            buf.append(line); ln += add
    if buf:
        parts.append("\n".join(buf))
    return parts

_RX_SUB_CODE = re.compile(r"^\(\s*UNIT\s*([0-9]+(?:\.[0-9]+)?)\s*\)", re.I)

def _short_sub(label: str | None) -> str:
    """–ò–∑ '(UNIT 2.1) –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤' –≤—ã—Ç–∞—â–∏–º '2.1'. –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ ‚Äî –≤–µ—Ä–Ω—ë–º –∏—Å—Ö–æ–¥–Ω–∏–∫."""
    if not label:
        return ""
    m = _RX_SUB_CODE.match(str(label))
    return m.group(1) if m else str(label)

def _format_grouped_by_unit(title: str, items: list[dict]) -> str:
    if not items:
        return f"{title}\n‚Äî –Ω–µ—Ç ‚Äî"
    # —Å–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ö–Ω–µ–º—É —é–Ω–∏—Ç—É
    by_unit: dict[str, list[dict]] = {}
    for it in items:
        by_unit.setdefault(it.get("unit") or "UNIT ?", []).append(it)

    lines = [title]
    for unit in sorted(by_unit.keys()):
        lines.append(hbold(unit))
        for it in by_unit[unit]:
            name   = it.get("name") or "‚Äî"
            mgr    = it.get("mgr") or "‚Äî"
            period = it.get("period") or "‚Äî"
            end    = it.get("end")
            hasD   = bool(it.get("hasEndDate"))
            addEnd = (not hasD and end) and f" ‚Äî –¥–æ {end}" or ""

            # –Ω–æ–≤–µ–Ω—å–∫–æ–µ: –ø–æ–¥—é–Ω–∏—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
            sub_label = it.get("sub") or ""
            sub = _short_sub(sub_label)
            sub_prefix = f"{sub} ¬∑ " if sub else ""

            lines.append(f"‚Ä¢ {sub_prefix}{name} ‚Äî {mgr} ‚Äî {period}{addEnd}")
        lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —é–Ω–∏—Ç–∞–º–∏
    return "\n".join(lines).rstrip()

async def _send_statuses(msg: Message, show: str):
    # 1) —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶¬ª
    wait = await msg.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶")

    try:
        resp = await list_projects_by_status()
    except Exception as e:
        await wait.edit_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤.\n<code>{e}</code>")
        return

    if not resp or not resp.get("ok"):
        err = (resp or {}).get("error") or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        await wait.edit_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤.\n<code>{err}</code>")
        return

    pending = resp.get("pending") or []
    paused  = resp.get("paused")  or []

    if show == "all":
        head = hbold("–°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –≤—Å–µ–º —é–Ω–∏—Ç–∞–º")
        block = "\n\n".join([
            _format_grouped_by_unit("üü° –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ / –∑–∞–∫—Ä—ã—Ç–∏–µ:", pending),
            _format_grouped_by_unit("‚è∏ –ù–∞ –ø–∞—É–∑–µ / –Ω–µ –Ω–∞—á–∞—Ç:", paused),
        ])
        text = f"{head}\n\n{block}"
        parts = _split_long(text)
        # –ø–µ—Ä–≤—ã–π –∫—É—Å–æ–∫ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º ¬´–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶¬ª, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –¥–æ–∫–∏–¥—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await wait.edit_text(parts[0])
        for p in parts[1:]:
            await msg.answer(p)
        return

    if show == "pending":
        text = _format_grouped_by_unit(hbold("üü° –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ / –∑–∞–∫—Ä—ã—Ç–∏–µ:"), pending)
        parts = _split_long(text)
        await wait.edit_text(parts[0])
        for p in parts[1:]:
            await msg.answer(p)
        return

    if show == "paused":
        text = _format_grouped_by_unit(hbold("‚è∏ –ù–∞ –ø–∞—É–∑–µ / –Ω–µ –Ω–∞—á–∞—Ç:"), paused)
        parts = _split_long(text)
        await wait.edit_text(parts[0])
        for p in parts[1:]:
            await msg.answer(p)
        return

# –ö–Ω–æ–ø–∫–∏ –∏–∑ —Ç–≤–æ–µ–≥–æ extra_menu
@router.message(F.text == "üü° –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–µ")
async def show_pending(msg: Message):
    await _send_statuses(msg, "pending")

@router.message(F.text == "‚è∏ –ù–∞ –ø–∞—É–∑–µ/–Ω–µ –Ω–∞—á–∞—Ç")
async def show_paused(msg: Message):
    await _send_statuses(msg, "paused")

# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –æ–¥–Ω–∞ –æ–±—â–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –µ—Å–ª–∏ –∑–∞–≤–µ–¥—ë—à—å –µ—ë –≤ –º–µ–Ω—é
@router.message(F.text == "üìã –°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤")
async def show_all_statuses(msg: Message):
    await _send_statuses(msg, "all")
