# bot/handlers/load_all.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.markdown import hbold

from ..keyboards.periods import periods_kb, PeriodCB
from ..utils.date_ranges import period_to_range
from ..utils.tg_utils import split_text
from ..gas_client import load_all as gas_load_all
from bot.utils.tg_utils import strip_codes_in_text, loading_message, pn, answer_html, edit_html, gas_guard

import re
from ..utils.tg_utils import split_text, strip_codes_in_text, answer_html


router = Router(name="load_all")
_HDR_RE = re.compile(r'(?m)^(?:\s*üß©\s*)?\(UNIT\s*\d+(?:\.\d+)?\).*?$')
_WEEKS_TAIL_RE = re.compile(r'(?m)\s*\(\d+\)\s*$')

def _beautify(text: str) -> str:
    # 1) —É–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã —É –ø—Ä–æ–µ–∫—Ç–æ–≤
    t = strip_codes_in_text(text)
    # 2) –¥–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º —Å—Ç—Ä–æ–∫–∏-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–∏–¥–∞ "(UNIT X)" –∏ "(UNIT X.Y) ..."
    t = _HDR_RE.sub(lambda m: f"<b>{m.group(0)}</b>", t)
    # 3) —É–±–∏—Ä–∞–µ–º –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ " (N)" ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å
    t = _WEEKS_TAIL_RE.sub('', t)
    return t
@router.callback_query(F.data == "menu:load_all")
@gas_guard()
async def open_periods_menu(cb: CallbackQuery):
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=periods_kb("load_all"))
    await cb.answer()

@router.callback_query(PeriodCB.filter(F.scope == "load_all"))
@gas_guard()
async def on_period_selected(cb: CallbackQuery, callback_data: PeriodCB):
    period = callback_data.period  # "this_month" | "next_month" | "quarter" | "half_year" | "year" | "none"

    # 1) –°–†–ê–ó–£ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–ª–∏–∫, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å "query is too old"
    try:
        await cb.answer("–ì–æ—Ç–æ–≤–ª—é –æ—Ç—á—ë—Ç‚Ä¶", show_alert=False)
    except Exception:
        # –µ—Å–ª–∏ —Ç–µ–ª–µ–≥–∞ —É–∂–µ –Ω–µ –∂–¥—ë—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        pass

    # 2) –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä, –ø–æ–∫–∞ –≥—Ä—É–∑–∏–º –æ—Ç—á—ë—Ç
    wait_msg: Message = await cb.message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç‚Ä¶")

    try:
        rng = period_to_range(period)  # -> {"from": "...", "to": "..."} –∏–ª–∏ None
        args = rng or {}

        resp = await gas_load_all(**args)
        if not (resp and resp.get("ok")):
            raise RuntimeError(resp.get("error") or "unknown error")

        # GAS –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ —Ä–∞–∑–±–∏—Ç—ã–µ —á–∞—Å—Ç–∏
        chunks = resp.get("chunks") or []
        title = hbold("–û–±—â–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å")

        # 3) –£–¥–∞–ª–∏–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–∞—Ç—á–∞–º–∏
        try:
            await wait_msg.delete()
        except Exception:
            pass

        if not chunks:
            await cb.message.answer(f"{title}\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        else:
            for chunk in chunks:
                text = f"{title}\n\n{_beautify(chunk)}".strip()
                for part in split_text(text, limit=3900):
                    # HTML-—Ä–µ–∂–∏–º, —á—Ç–æ–±—ã <b> —Ä–∞–±–æ—Ç–∞–ª
                    await answer_html(cb, part)


        # 4) –í–µ—Ä–Ω—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=periods_kb("load_all"))

    except Exception as e:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —à–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await wait_msg.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–±—â–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏:\n{e}")
        except Exception:
            await cb.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–±—â–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏:\n{e}")
